import json
from bson.objectid import ObjectId
from application.utils.database import pymongo


def service_create_project(data):
    """This function inserts a new project into the database and associates it with an account."""

    accountId = data["accountId"]

    if not pymongo.db.accounts.find_one({"accountId": accountId}):
        raise ValueError("Account not found.")

    # Insert the new project and get the _id generated by MongoDB
    inserted = pymongo.db.projects.insert_one(data)
    projectId = inserted.inserted_id

    # Check if insertion was acknowledged by db
    if not inserted.acknowledged:
        raise Exception("Failed to add project into the database")
    
    # Update newly inserted project to set projectId which will be the same value as _id
    pymongo.db.projects.update_one({"_id": projectId}, {"$set": {"projectId": str(projectId)}})

    # Fetch the newly created project
    new_project = pymongo.db.projects.find_one({"_id": ObjectId(projectId)})

    # Remove the non-serializable BSON ObjectId from the dictionary before returning the POST response body
    del new_project["_id"]

    return new_project

    
def service_get_project(projectId):
    """This function retrieves a project associated with an account using project ID and account ID."""

    project = pymongo.db.projects.find_one({"_id": ObjectId(projectId)})

    if not project:
        raise ValueError("Project not found.")
    
    # Delete the '_id' key-value pair because we don't want it in GET response body
    del project["_id"]

    return project


def service_get_all_projects(accountId):
    """This function retrieves all projects associated with an account using account ID."""

    # Check if the account ID exists in the 'accounts' collection of the db
    if not pymongo.db.accounts.find_one({"_id": ObjectId(accountId)}):
        raise ValueError("Account not found.")

    # Retrieve all projects from the 'projects' collection that are associated with the account ID
    projects = pymongo.db.projects.find({"accountId": accountId})

    all_projects = [project for project in projects]
    
    for project in all_projects:
        project.pop("_id")

    return all_projects


def service_update_project(projectId, accountId, data):
    """This function updates a project associated with an account using project ID and account ID."""

    if not pymongo.db.accounts.find_one({"_id": ObjectId(accountId)}):
        raise ValueError("Account not found.")

    result = pymongo.db.projects.update_one(
        {"projectId": projectId, "accountId": accountId},
        {"$set": data}
    )

    if result.modified_count == 0:
        return None
    
    # Fetch the updated project
    updated_project = pymongo.db.projects.find_one({"projectId": projectId, "accountId": accountId})
    
    if updated_project:
        del updated_project["_id"]
    
    return updated_project


def service_delete_project(projectId, accountId):
    """This function deletes a project associated with an account using project ID and account ID."""

    if not pymongo.db.accounts.find_one({"_id": ObjectId(accountId)}):
        raise ValueError("Account not found.")

    result = pymongo.db.projects.delete_one({"_id": ObjectId(projectId), "accountId": ObjectId(accountId)})
    return result.deleted_count
    