import json
from bson.objectid import ObjectId
from application.utils.database import pymongo


def service_create_project(data, account_id):
    """This function inserts a new project into the database and associates it with an account."""

    if not pymongo.db.accounts.find_one({"_id": ObjectId(account_id)}):
        raise ValueError("Account not found.")

    # Set the account_id from the request body
    data["account_id"] = ObjectId(account_id)

    # Insert the new project and get the _id generated by MongoDB
    inserted_id = pymongo.db.projects.insert_one(data).inserted_id

    # Retrieve the newly inserted project with all its fields
    new_project = pymongo.db.projects.find_one({"_id": inserted_id})

    # Add the project_id field with the same value as the generated _id
    new_project["project_id"] = str(inserted_id)

    return new_project

    
def service_get_project(project_id, account_id):
    """This function retrieves a project associated with an account using project ID and account ID."""

    if not pymongo.db.accounts.find_one({"_id": ObjectId(account_id)}):
        raise ValueError("Account not found.")

    project = pymongo.db.projects.find_one({"_id": ObjectId(project_id)})

    if not project:
        raise ValueError("Project not found.")

    return project


def service_update_project(project_id, account_id, data):
    """This function updates a project associated with an account using project ID and account ID."""

    if not pymongo.db.accounts.find_one({"_id": ObjectId(account_id)}):
        raise ValueError("Account not found.")

    result = pymongo.db.projects.update_one(
        {"_id": ObjectId(project_id), "account_id": ObjectId(account_id)},
        {"$set": data}
    )
    return result.modified_count


def service_delete_project(project_id, account_id):
    """This function deletes a project associated with an account using project ID and account ID."""

    if not pymongo.db.accounts.find_one({"_id": ObjectId(account_id)}):
        raise ValueError("Account not found.")

    result = pymongo.db.projects.delete_one({"_id": ObjectId(project_id), "account_id": ObjectId(account_id)})
    return result.deleted_count
    